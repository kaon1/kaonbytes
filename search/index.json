[{"content":"The best way for a Network Engineer to grasp automation is to begin by coding a simple real problem that they encounter. We often use IPERF to measure the bandwidth performance of a network path. With a few lines of python code, we can automate this task and graph the data via DataDog for historical reference.\nThe End Result Nobody likes to read through pages of text and images to get to the money shot. So here it is\u0026hellip;\nDataDog Graph Graph of hourly iperf3 tests. Each test is limited to 1 stream and 1Gbps bandiwdth cap.\nPython Code iperf-dd-metrics.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  # Script to run iperf3 test to measure bandwidth to remote site. # Runs in reverse mode to measure both ingress and egress bandwidth # Sends avg bandwidth metric to Datadog as a custom gauge metric # Its suggested you run this script as a cron job on a regular hourly interval from datadog import initialize, statsd import time import iperf3 import os # Set vars # Remote iperf server IP remote_site = \u0026#39;\u0026lt;enter remote host IP here\u0026gt;\u0026#39; # Datadog API Key api_key = \u0026#39;\u0026lt;enter dd api key here\u0026gt;\u0026#39; # How long to run iperf3 test in seconds test_duration = 20 # Set DD options for statsd init options = { \u0026#39;statsd_host\u0026#39;: \u0026#39;127.0.0.1\u0026#39;, \u0026#39;statsd_port\u0026#39;: 8125, \u0026#39;api_key\u0026#39;: api_key } initialize(**options) # Set Iperf Client Options # Run 10 parallel streams on port 5201 for duration w/ reverse client = iperf3.Client() client.server_hostname = remote_site client.zerocopy = True client.verbose = False client.reverse = True client.port = 5201 client.num_streams = 10 client.duration = int(test_duration) client.bandwidth = 1000000000 # Run iperf3 test result = client.run() # extract relevant data sent_mbps = int(result.sent_Mbps) received_mbps = int(result.received_Mbps) # send Metrics to DD and add some tags for classification in DD GUI # send bandwidth metric - egress mbps statsd.gauge(\u0026#39;iperf3.test.mbps.egress\u0026#39;, sent_mbps, tags=[\u0026#34;team_name:your_team\u0026#34;, \u0026#34;team_app:iperf\u0026#34;]) # send bandwidth metric - ingress mbps statsd.gauge(\u0026#39;iperf3.test.mbps.ingress\u0026#39;, received_mbps, tags=[\u0026#34;team_name:your_team\u0026#34;, \u0026#34;team_app:iperf\u0026#34;])   The Process If you\u0026rsquo;re still here, let\u0026rsquo;s get into the details\u0026hellip;\nSetup  Spin up two Linux Hosts (HostA and HostB)  Install Python3 \u0026ndash;\u0026gt; yum install python3 Install IPERF3 \u0026ndash;\u0026gt; yum install iperf3 Install iPerf3 Python Wrapper \u0026ndash;\u0026gt; pip install iperf3   Setup a DataDog Account and API Key  Graphing the metrics is optional. Alternatively, we can save results to local disk.    iperf3 Server Choose one of your hosts to be your always-on iperf3 server and setup an iperf3 service in systemd\n For Centos Linux:  cd /etc/systemd/system/ Create a file called iperf3.service Contents:    1 2 3 4 5 6 7 8 9 10 11 12 13 14  # Centos Server file to run iperf3 service on startup. # This server acts as the iperf \u0026#39;receiver\u0026#39; for speed testing. # /etc/systemd/system/iperf3.service # User service: $HOME/.config/systemd/user/iperf3.service [Unit] Description=iperf3 server After=syslog.target network.target auditd.service [Service] ExecStart=/usr/bin/iperf3 -s [Install] WantedBy=multi-user.target    enable the service to run at startup: systemctl enable iperf3.service start the iperf3 service: systemctl start iperf3.service verify the service is running: systemctl status iperf3.service or ps aux | grep iperf  iperf3 Client Begin testing the iperf3 service by creating a simple python script on the Client HostA\n Create iperf-dd-metrics-test.py:  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  import iperf3 # Set vars # Remote iperf server IP remote_site = \u0026#39;10.220.0.244\u0026#39; # How long to run iperf3 test in seconds test_duration = 10 # Set Iperf Client Options # Run 10 parallel streams on port 5201 for duration w/ reverse client = iperf3.Client() client.server_hostname = remote_site client.zerocopy = True client.verbose = False client.reverse = True client.port = 5201 client.num_streams = 10 client.duration = int(test_duration) client.bandwidth = 1000000000 # Run iperf3 test result = client.run() # extract relevant data sent_mbps = int(result.sent_Mbps) received_mbps = int(result.received_Mbps) print(\u0026#39;sent_mbps: \u0026#39;) print(sent_mbps) print(\u0026#39;received_mbps: \u0026#39;) print(received_mbps)    run the file: # python3 iperf-dd-metrics-test.py:  results:  1 2 3 4  sent_mbps: 966 received_mbps: 959     Now we have a fully functioning iperf3 client and server setup.\nSending Metrics to DataDog DataDog has a python library to allow us to send the speed test results up to DD\n Import the library and initialize options:  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  from datadog import initialize, statsd # Datadog API Key api_key = os.getenv(\u0026#39;DD_API_KEY\u0026#39;) # Set DD options for statsd init options = { \u0026#39;statsd_host\u0026#39;: \u0026#39;127.0.0.1\u0026#39;, \u0026#39;statsd_port\u0026#39;: 8125, \u0026#39;api_key\u0026#39;: api_key } initialize(**options) # send Metrics to DD and add some tags for classification in DD GUI # send bandwidth metric - egress mbps statsd.gauge(\u0026#39;iperf3.test.mbps.egress\u0026#39;, sent_mbps, tags=[\u0026#34;team_name:your_team\u0026#34;, \u0026#34;team_app:iperf\u0026#34;]) # send bandwidth metric - ingress mbps statsd.gauge(\u0026#39;iperf3.test.mbps.ingress\u0026#39;, received_mbps, tags=[\u0026#34;team_name:your_team\u0026#34;, \u0026#34;team_app:iperf\u0026#34;])   Full Script and Crontab Put the two pieces of the script together and you get the end result \u0026mdash; iperf-dd-metrics.py\nUse crontab to continuously run the script in periodic intervals.\n1 2 3 4 5 6 7 8 9  # Example of job definition: # .---------------- minute (0 - 59) # | .------------- hour (0 - 23) # | | .---------- day of month (1 - 31) # | | | .------- month (1 - 12) OR jan,feb,mar,apr ... # | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat # | | | | | # * * * * * user-name command to be executed 20 * * * * root /usr/bin/python3 /home/iperf-python/iperf-dd-metrics.py   The above job will run every hour on the 20th minute of the hour forever\nVisualizing the Data The metrics that are being sent to DataDog need to be graphed on a dashboard\n Logon to DataDog and go to Metrics \u0026ndash;\u0026gt; Explorer Search iperf3 Find you metrics   Create a timeseries graph:  ","date":"2021-04-14T00:00:00Z","image":"https://kaonbytes.com/p/automate-network-bandwidth-testing/python-iperf-datadog-mini_huf5ca950f41d11dcdd638690189bca5b1_274518_120x120_fill_box_smart1_3.png","permalink":"https://kaonbytes.com/p/automate-network-bandwidth-testing/","title":"Automate Network Bandwidth Testing"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code       A B C D E F     Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien    Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Diff code block 1 2 3 4 5  [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;]   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image \n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","date":"2019-03-11T00:00:00Z","image":"https://kaonbytes.com/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://kaonbytes.com/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode    Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019  Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }   bilibilibi Shortcode   Gist Shortcode ","date":"2019-03-10T00:00:00Z","permalink":"https://kaonbytes.com/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://kaonbytes.com/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://kaonbytes.com/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  1 2 3  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }}    To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files  Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://kaonbytes.com/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n N.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }  ","date":"2019-03-05T00:00:00Z","image":"https://kaonbytes.com/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://kaonbytes.com/p/emoji-support/","title":"Emoji Support"}]