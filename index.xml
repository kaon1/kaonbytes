<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>KaonBytes</title><link>https://kaonbytes.com/</link><description>Recent content on KaonBytes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 20 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kaonbytes.com/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://kaonbytes.com/about/</link><pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate><guid>https://kaonbytes.com/about/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>&lt;strong>As a Network Engineer&lt;/strong>, I love to get hands-on and solve complex problems. I&amp;rsquo;ve been able to combine my
networking skills with my Master&amp;rsquo;s in computer science to create automation tools and practices for my teams.&lt;/p>
&lt;p>I decided to start publishing content for a couple of reasons:&lt;/p>
&lt;ul>
&lt;li>To give back to the network engineering community
&lt;ul>
&lt;li>If other engineers can stumble on my blog posts and solve a problem or become inspired then it would make me very happy!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>As a brain-dump for stuff I work on.
&lt;ul>
&lt;li>I don&amp;rsquo;t like solving the same problem twice&amp;hellip;getting stuff down and documented should help with that.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Solidifying my understanding of the tech I work on by writing about it.&lt;/li>
&lt;/ul>
&lt;h2 id="career">Career&lt;/h2>
&lt;p>&lt;strong>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/strong>&lt;/p>
&lt;p>&lt;strong>I spent the first half of my career&lt;/strong> working for a &lt;a class="link" href="https://naturalwireless.com/" target="_blank" rel="noopener"
>regional WISP&lt;/a> in the NYC-Metro Area.
We were all about growth and moving quickly. We were building out new sites every week to expand the customer base and network footprint.
This type of environment forced me to start building tools:&lt;/p>
&lt;ul>
&lt;li>Using a LAMP stack I built a network deployment system for new network sites
&lt;ul>
&lt;li>The process involved creating labels, creating configuration templates and loading the templates onto network routers, switches, and WAPs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Additionally, I built out some custom monitoring tools to check RSSI (wireless signal strength) on our rooftop links with a tier of email and text alerting&lt;/li>
&lt;li>The majority of the tooling was built in PHP and used cURL to scrape data and load config.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/strong>&lt;/p>
&lt;p>&lt;strong>The next phase of my career&lt;/strong>, I moved to a &lt;a class="link" href="https://www.pgi.com/virtual-events/webcast/" target="_blank" rel="noopener"
>live webcasting company&lt;/a> as a Network Engineer on the DevOps team.&lt;/p>
&lt;p>Working on a &lt;strong>live&lt;/strong> webcast production network can be intense.
Imagine a Fortune100 firm with 50,000 employees hosting a live TownHall on your platform&amp;hellip; the margin for error is very small.&lt;/p>
&lt;p>I did some typical network work here such as:&lt;/p>
&lt;ul>
&lt;li>DataCenter migrations and refreshes&lt;/li>
&lt;li>AWS Direct connect and Point-to-Point Circuit architecture of the WAN&lt;/li>
&lt;li>BGP traffic engineering&lt;/li>
&lt;/ul>
&lt;p>The network did not have a constant need to grow so I was able to expand my breadth of tech knowledge to other fields such as Security and Linux Systems.
I was able to build out systems for Vulnerability, Perimeter Scanning and IDS and also expand my knowledge of CDN Streaming (Fastly).&lt;/p>
&lt;p>&lt;strong>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/strong>&lt;/p>
&lt;p>&lt;strong>The next couple of years I worked&lt;/strong> in the &lt;a class="link" href="https://invesco.com" target="_blank" rel="noopener"
>financial services industry&lt;/a> as a Lead Network Engineer.
The biggest takeaways from this experience were:&lt;/p>
&lt;ul>
&lt;li>Change control is a thing (who knew?)&lt;/li>
&lt;li>I learned Agile (sprinting, scrumming etc). I don&amp;rsquo;t think agile can &lt;strong>ever&lt;/strong> work well
for an Infra team but at least I learned it!&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Currently, I am working for a great organization and team&lt;/strong> with the &lt;a class="link" href="https://nytimes.com" target="_blank" rel="noopener"
>New York Times&lt;/a> as a Staff Network Engineer.&lt;/p>
&lt;p>Our team straddles the boundary of two distinct tech worlds:&lt;/p>
&lt;ol>
&lt;li>Support the classic enterprise and paper-printing infrastructure&lt;/li>
&lt;li>Stay up-to-date with the big-tech world of CI/CD, Cloud, (insert buzzword here).&lt;/li>
&lt;/ol>
&lt;p>It keeps things fun!&lt;/p>
&lt;ul>
&lt;li>I am focusing my efforts on implementing systems and practices to improve network operations and visibility.&lt;/li>
&lt;li>Building out and maintaining a source-of-truth, an automation platform and using CI/CD processes.&lt;/li>
&lt;li>I believe solving a problem is only 50% of the job. The other half is documentation and knowledge sharing. As I build
these processes I try to document and setup team sharing sessions as much as possible.&lt;/li>
&lt;/ul>
&lt;h2 id="interests">Interests&lt;/h2>
&lt;ul>
&lt;li>I love to BBQ. When I&amp;rsquo;m not chasing my kids around the park I&amp;rsquo;m smoking some ribs or brisket!&lt;/li>
&lt;li>I&amp;rsquo;m a homelab enthusiast with all the bells and whistles setup in my basement.&lt;/li>
&lt;li>I love keeping up with tech. I follow the usual network engineering community on twitter.
Feel free to &lt;a class="link" href="https://twitter.com/Kaon_123" target="_blank" rel="noopener"
>contact me&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Automate Network Bandwidth Testing</title><link>https://kaonbytes.com/p/automate-network-bandwidth-testing/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>https://kaonbytes.com/p/automate-network-bandwidth-testing/</guid><description>&lt;img src="https://kaonbytes.com/p/automate-network-bandwidth-testing/python-iperf-datadog-mini.png" alt="Featured image of post Automate Network Bandwidth Testing" />&lt;p>&lt;strong>The best way for a Network Engineer to grasp automation&lt;/strong> is to begin by coding a simple problem that they
encounter. We often use &lt;a class="link" href="https://iperf.fr/" target="_blank" rel="noopener"
>IPERF&lt;/a> to measure the bandwidth performance of a network path.
With a few lines of &lt;a class="link" href="https://iperf3-python.readthedocs.io/en/latest/" target="_blank" rel="noopener"
>python code&lt;/a>, we can
automate this task and graph the data via &lt;a class="link" href="https://www.datadoghq.com/" target="_blank" rel="noopener"
>DataDog&lt;/a> for historical reference.&lt;/p>
&lt;h2 id="the-end-result">The End Result&lt;/h2>
&lt;p>Nobody likes to read through pages of text and images to get to the money shot. So here it is&amp;hellip;&lt;/p>
&lt;h3 id="datadog-graph">DataDog Graph&lt;/h3>
&lt;p>Graph of hourly iperf3 tests:&lt;/p>
&lt;p>&lt;img src="https://kaonbytes.com/p/automate-network-bandwidth-testing/dd-graph.png"
width="1650"
height="967"
srcset="https://kaonbytes.com/p/automate-network-bandwidth-testing/dd-graph_huce97b4b18d250323d15d8c1d27ace15d_123749_480x0_resize_box_3.png 480w, https://kaonbytes.com/p/automate-network-bandwidth-testing/dd-graph_huce97b4b18d250323d15d8c1d27ace15d_123749_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="170"
data-flex-basis="409px"
>&lt;/p>
&lt;h3 id="python-code">Python Code&lt;/h3>
&lt;p>&lt;a class="link" href="https://github.com/kaon1/python-misc/blob/master/observability-metrics/iperf-dd-metrics.py" target="_blank" rel="noopener"
>iperf-dd-metrics.py&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Script to run iperf3 test to measure bandwidth to remote site.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Runs in reverse mode to measure both ingress and egress bandwidth&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Sends avg bandwidth metric to Datadog as a custom gauge metric&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Its suggested you run this script as a cron job on a regular hourly interval&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">datadog&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">initialize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">statsd&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">iperf3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Set vars&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Remote iperf server IP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">remote_site&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;enter remote host IP here&amp;gt;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Datadog API Key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">api_key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;enter dd api key here&amp;gt;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># How long to run iperf3 test in seconds&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">test_duration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Set DD options for statsd init&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;statsd_host&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;127.0.0.1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;statsd_port&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">8125&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;api_key&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">api_key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Set Iperf Client Options&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Run 10 parallel streams on port 5201 for duration w/ reverse&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">iperf3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Client&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">server_hostname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">remote_site&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">zerocopy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">verbose&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reverse&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5201&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">num_streams&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">duration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_duration&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bandwidth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000000000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Run iperf3 test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># extract relevant data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sent_mbps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sent_Mbps&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">received_mbps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">received_Mbps&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># send Metrics to DD and add some tags for classification in DD GUI&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># send bandwidth metric - egress mbps&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">statsd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">gauge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;iperf3.test.mbps.egress&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sent_mbps&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tags&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;team_name:your_team&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;team_app:iperf&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># send bandwidth metric - ingress mbps&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">statsd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">gauge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;iperf3.test.mbps.ingress&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">received_mbps&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tags&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;team_name:your_team&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;team_app:iperf&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the-process">The Process&lt;/h2>
&lt;p>If you&amp;rsquo;re still here, let&amp;rsquo;s get into the details&amp;hellip;&lt;/p>
&lt;h3 id="setup">Setup&lt;/h3>
&lt;ul>
&lt;li>Spin up two Linux Hosts (HostA and HostB)
&lt;ul>
&lt;li>Install &lt;a class="link" href="https://docs.python-guide.org/starting/install3/linux/" target="_blank" rel="noopener"
>Python3&lt;/a> &amp;ndash;&amp;gt; &lt;code>yum install python3&lt;/code>&lt;/li>
&lt;li>Install &lt;a class="link" href="https://iperf.fr/iperf-download.php" target="_blank" rel="noopener"
>IPERF3&lt;/a> &amp;ndash;&amp;gt; &lt;code>yum install iperf3&lt;/code>&lt;/li>
&lt;li>Install &lt;a class="link" href="https://iperf3-python.readthedocs.io/en/latest/installation.html" target="_blank" rel="noopener"
>iPerf3 Python Wrapper&lt;/a> &amp;ndash;&amp;gt; &lt;code>pip install iperf3&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Setup a DataDog Account and &lt;a class="link" href="https://docs.datadoghq.com/account_management/api-app-keys/" target="_blank" rel="noopener"
>API Key&lt;/a>
&lt;ul>
&lt;li>Graphing the metrics is optional. Alternatively, we can save results to local disk.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="iperf3-server">iperf3 Server&lt;/h3>
&lt;p>Choose one of your hosts to be your &lt;strong>always-on&lt;/strong> iperf3 server and setup an iperf3 service in systemd&lt;/p>
&lt;ul>
&lt;li>For Centos Linux:
&lt;ul>
&lt;li>cd &lt;code>/etc/systemd/system/&lt;/code>&lt;/li>
&lt;li>Create a file called &lt;a class="link" href="https://github.com/kaon1/python-misc/blob/master/observability-metrics/iperf3.service" target="_blank" rel="noopener"
>iperf3.service&lt;/a>&lt;/li>
&lt;li>Contents:&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># Centos Server file to run iperf3 service on startup.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># This server acts as the iperf &amp;#39;receiver&amp;#39; for speed testing.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># /etc/systemd/system/iperf3.service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># User service: $HOME/.config/systemd/user/iperf3.service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[Unit]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Description=iperf3 server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">After=syslog.target network.target auditd.service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[Service]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ExecStart=/usr/bin/iperf3 -s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[Install]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WantedBy=multi-user.target
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>enable the service to run at startup: &lt;code>systemctl enable iperf3.service&lt;/code>&lt;/li>
&lt;li>start the iperf3 service: &lt;code>systemctl start iperf3.service&lt;/code>&lt;/li>
&lt;li>verify the service is running: &lt;code>systemctl status iperf3.service&lt;/code> or &lt;code>ps aux | grep iperf&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="iperf3-client">iperf3 Client&lt;/h3>
&lt;p>Begin testing the iperf3 service by creating a simple python script on the Client HostA&lt;/p>
&lt;ul>
&lt;li>Create &lt;code>iperf-dd-metrics-test.py&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">iperf3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Set vars&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Remote iperf server IP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">remote_site&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;ip of server goes here&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># How long to run iperf3 test in seconds&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">test_duration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Set Iperf Client Options&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Run 10 parallel streams on port 5201 for duration w/ reverse&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">iperf3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Client&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">server_hostname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">remote_site&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">zerocopy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">verbose&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reverse&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5201&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">num_streams&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">duration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_duration&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">bandwidth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1000000000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Run iperf3 test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># extract relevant data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sent_mbps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sent_Mbps&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">received_mbps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">received_Mbps&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;sent_mbps: &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sent_mbps&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;received_mbps: &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">received_mbps&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>run the file: &lt;code># python3 iperf-dd-metrics-test.py&lt;/code>:
&lt;ul>
&lt;li>results:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sent_mbps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">966
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">received_mbps:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">959
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>Now we have a fully functioning iperf3 client and server setup.&lt;/p>
&lt;h3 id="sending-metrics-to-datadog">Sending Metrics to DataDog&lt;/h3>
&lt;p>DataDog has a &lt;a class="link" href="https://github.com/DataDog/datadogpy" target="_blank" rel="noopener"
>python library&lt;/a> to allow us to send the speed test results up to DD&lt;/p>
&lt;ul>
&lt;li>Import the library and initialize options:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">datadog&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">initialize&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">statsd&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Datadog API Key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">api_key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;DD_API_KEY&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Set DD options for statsd init&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;statsd_host&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;127.0.0.1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;statsd_port&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">8125&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;api_key&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">api_key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">**&lt;/span>&lt;span class="n">options&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># send Metrics to DD and add some tags for classification in DD GUI&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># send bandwidth metric - egress mbps&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">statsd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">gauge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;iperf3.test.mbps.egress&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sent_mbps&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tags&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;team_name:your_team&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;team_app:iperf&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># send bandwidth metric - ingress mbps&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">statsd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">gauge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;iperf3.test.mbps.ingress&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">received_mbps&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tags&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;team_name:your_team&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;team_app:iperf&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="full-script-and-crontab">Full Script and Crontab&lt;/h3>
&lt;p>Put the two pieces of the script together and you get the end result
&amp;mdash; &lt;a class="link" href="https://github.com/kaon1/python-misc/blob/master/observability-metrics/iperf-dd-metrics.py" target="_blank" rel="noopener"
>iperf-dd-metrics.py&lt;/a>&lt;/p>
&lt;p>Use crontab to continuously run the script in periodic intervals.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl"># Example of job definition:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># .---------------- minute (0 - 59)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># | .------------- hour (0 - 23)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># | | .---------- day of month (1 - 31)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># | | | .------- month (1 - 12) OR jan,feb,mar,apr ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># | | | | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># * * * * * user-name command to be executed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">20 * * * * root /usr/bin/python3 /home/iperf-python/iperf-dd-metrics.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above job will run every hour on the 20th minute of the hour forever&lt;/p>
&lt;h3 id="visualizing-the-data">Visualizing the Data&lt;/h3>
&lt;p>The metrics that are being sent to DataDog need to be graphed on a dashboard&lt;/p>
&lt;ul>
&lt;li>Logon to DataDog and go to &lt;strong>Metrics &amp;ndash;&amp;gt; Explorer&lt;/strong>&lt;/li>
&lt;li>Search &lt;code>iperf3&lt;/code>&lt;/li>
&lt;li>Find you metrics&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://kaonbytes.com/p/automate-network-bandwidth-testing/dd-metrics-explorer.png"
width="1287"
height="1005"
srcset="https://kaonbytes.com/p/automate-network-bandwidth-testing/dd-metrics-explorer_hu607ff2294a8588b550f3ef6b36ca6833_108200_480x0_resize_box_3.png 480w, https://kaonbytes.com/p/automate-network-bandwidth-testing/dd-metrics-explorer_hu607ff2294a8588b550f3ef6b36ca6833_108200_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="307px"
>&lt;/p>
&lt;ul>
&lt;li>Create a &lt;strong>timeseries graph&lt;/strong>&lt;/li>
&lt;li>Graph both Egress and Ingress &lt;strong>Metrics&lt;/strong> as A and B respectively&lt;/li>
&lt;li>Set your &lt;strong>Y-Axis&lt;/strong> to desired MAX setting (999 in my case)&lt;/li>
&lt;li>Give your graph a &lt;strong>title&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://kaonbytes.com/p/automate-network-bandwidth-testing/dd-create-graph.png"
width="1655"
height="1278"
srcset="https://kaonbytes.com/p/automate-network-bandwidth-testing/dd-create-graph_hufff5922d1397208331e3d5d7da3e84b6_132997_480x0_resize_box_3.png 480w, https://kaonbytes.com/p/automate-network-bandwidth-testing/dd-create-graph_hufff5922d1397208331e3d5d7da3e84b6_132997_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/p>
&lt;h2 id="final-thoughts">Final Thoughts&lt;/h2>
&lt;p>This scenario is a good way to get started with network automation. However, it can be iterated and improved by:&lt;/p>
&lt;ul>
&lt;li>Adding more metrics:
&lt;ul>
&lt;li>Jitter&lt;/li>
&lt;li>Packet Loss&lt;/li>
&lt;li>UDP Testing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Add exception handling&lt;/li>
&lt;/ul>
&lt;p>Feel free to contact me on twitter or comment below if you need help. Cheers!&lt;/p></description></item><item><title>Archives</title><link>https://kaonbytes.com/archives/</link><pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate><guid>https://kaonbytes.com/archives/</guid><description/></item><item><title>Search</title><link>https://kaonbytes.com/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kaonbytes.com/search/</guid><description/></item></channel></rss>